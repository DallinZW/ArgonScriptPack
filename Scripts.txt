//circle script
float circle(in vec2 _st, in float _radius, in vec2 _location){
    vec2 dist = _st-_location;
	return 1.-smoothstep(_radius-(_radius*0.01),
                         _radius+(_radius*0.01),
                         dot(dist,dist)*4.0);
}

//line plot script
float plot(vec2 st, float pct){
  return  smoothstep( pct-0.02, pct, st.y) -
          smoothstep( pct, pct+0.02, st.y);
}

//equilateral shape script 
float shape (in int sides, in float size, in float rot, in vec2 shpos, in vec2 pos)
{
    pos =  (pos * 2.0 - 1.0) - (shpos * 2.0 - 1.0);
    float a = atan(pos.x,pos.y)+3.14159265359*rot;
	float r = 6.28318530718/float(sides);
    float d = cos(floor(.5+a/r)*r-a)*length(pos);
    return float(1.0-smoothstep(size, size+0.01, d));
}
//USE: color = vec3(shape(4, 0.1, 1., vec2(0.2, 0.8), gl_FragCoord));

//rotating plane
mat2 rotate2d(float _angle){
    return mat2(cos(_angle),-sin(_angle),
                sin(_angle),cos(_angle));
}
//USE: vec2 coordinate *= rotate2d( sin(u_time)*PI );

//stuff for radial drawing
vec2 pos = vec2(0.5)-st;
float r = length(pos)*2.0;
float a = atan(pos.y,pos.x);
//a is angle (replaces x)
//r is dist from 0.5 (origin/center) (replaces y)

vec3 hsv2rgb_smooth( in vec3 c )
{
    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );

	rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing	

	return c.z * mix( vec3(1.0), rgb, c.y);
}
